apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.devtools.ksp'

android {
    compileSdkVersion libs.versions.compileSdk.get().toInteger()
    namespace "com.kirchhoff.movies"

    defaultConfig {
        applicationId "com.kirchhoff.movies"
        minSdkVersion libs.versions.minSdk.get()
        targetSdkVersion libs.versions.targetSdk.get()
        versionCode libs.versions.versionCode.get().toInteger()
        versionName libs.versions.versionName.get()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "API_URL", "\"https://api.themoviedb.org/\""
        buildConfigField "String", "API_KEY", "${getLocalProperty("api_key")}"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    buildFeatures {
        viewBinding true
        buildConfig true
    }

    lintOptions {
        disable 'ContentDescription', 'GradleDependency', 'AndroidGradlePluginVersion'
        warningsAsErrors true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

ksp {
  arg("KOIN_CONFIG_CHECK","true")
}

dependencies {
    implementation libs.appCompat
    implementation libs.material
    implementation libs.constraintLayout
    implementation libs.coreKtx

    implementation libs.kotlin
    implementation libs.coroutines

    implementation libs.bundles.architectureComponents

    implementation libs.bundles.di

    implementation libs.bundles.internet
    implementation libs.gson

    implementation libs.timber

    debugImplementation libs.leakCanary

    testImplementation libs.bundles.compose
    testImplementation libs.bundles.tests
    testImplementation libs.konsist

    implementation project(path: ':core')
    implementation project(path: ':networkdata')
    implementation project(path: ':screen:movie')
    implementation project(path: ':screen:tvshow')
    implementation project(path: ':screen:review')
    implementation project(path: ':screen:person')
    implementation project(path: ':screen:credits')
    implementation project(path: ':view:voteview')
    implementation project(path: ':view:ratingtextview')
    implementation project(path: ':storage:movie')
    implementation project(path: ':storage:tvshow')
}

def getLocalProperty(String propName) {
    def propsFile = rootProject.file("local.properties")
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in local.properties")
        }
    } else {
        print("local.properties does not exist!")
    }
}
