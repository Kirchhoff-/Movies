apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion libs.versions.buildTools.get()

    defaultConfig {
        applicationId "com.kirchhoff.movies"
        minSdkVersion libs.versions.minSdk.get()
        targetSdkVersion libs.versions.targetSdk.get()
        versionCode 2
        versionName libs.versions.versionName.get()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "API_URL", "\"https://api.themoviedb.org/\""
        buildConfigField "String", "API_KEY", "${getLocalProperty("api_key")}"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        viewBinding true
    }

    lintOptions {
        disable 'ContentDescription'
        warningsAsErrors true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation libs.material
    implementation libs.constraintLayout
    implementation libs.coreKtx

    implementation libs.kotlin
    implementation libs.coroutines

    implementation libs.bundles.architectureComponents

    implementation libs.bundles.di

    implementation libs.bundles.internet
    implementation libs.gson

    implementation libs.timber
    implementation libs.bundles.stethoLogs

    testImplementation libs.bundles.tests

    implementation project(path: ':core')
    implementation project(path: ':networkdata')
    implementation project(path: ':view:voteview')
    implementation project(path: ':view:keywordsview')
    implementation project(path: ':view:creditsview')
}

def getLocalProperty(String propName) {
    def propsFile = rootProject.file("local.properties")
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in local.properties")
        }
    } else {
        print("local.properties does not exist!")
    }
}