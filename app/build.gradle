apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply from: '../buildsystem/dependencies.gradle'


android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId "com.kirchhoff.movies"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.versionCode
        versionName versions.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "API_URL", "\"https://api.themoviedb.org/\""
        buildConfigField "String", "API_KEY", "${getLocalProperty("api_key")}"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        viewBinding true
    }

    lintOptions {
        disable 'ContentDescription'
        warningsAsErrors true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation libraries.androidxMaterial
    implementation libraries.constraintLayout
    implementation libraries.coreKtx

    implementation libraries.kotlin
    implementation libraries.coroutines
    implementation libraries.coroutinesAndroid

    implementation libraries.lifecycle
    implementation libraries.liveData
    implementation libraries.viewModel

    implementation libraries.koin
    implementation libraries.koinScope
    implementation libraries.koinViewModel

    implementation libraries.retrofit
    implementation libraries.retrofitConverter
    implementation libraries.okHttpInterceptor
    implementation libraries.gson
    implementation libraries.retrofitCoroutines

    implementation libraries.timber
    implementation libraries.stetho
    implementation libraries.stethoOkHttp

    testImplementation libraries.junit
    testImplementation libraries.mockito
    testImplementation libraries.coroutinesTest
    testImplementation libraries.archTesting

    implementation project(path: ':core')
    implementation project(path: ':networkdata')
    implementation project(path: ':voteview')
    implementation project(path: ':keywordsview')
    implementation project(path: ':creditsview')
}

def getLocalProperty(String propName) {
    def propsFile = rootProject.file("local.properties")
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in local.properties")
        }
    } else {
        print("local.properties does not exist!")
    }
}